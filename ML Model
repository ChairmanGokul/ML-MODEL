- **Model**
    
    ```python
    import pandas as pd
    import numpy as np
    
    # Seed for reproducibility
    np.random.seed(42)
    
    # Define the crops and corresponding temperature ranges
    crops = ['Rice', 'Maize', 'Banana', 'Mango', 'Apple']
    temp_ranges = {
        'Rice': (20, 30),
        'Maize': (24, 32),
        'Banana': (26, 34),
        'Mango': (22, 30),
        'Apple': (18, 25)
    }
    
    # Generate 500 rows of data
    rows = []
    for _ in range(10000):  # 100 sets of 5 crops
        for crop in crops:
            rainfall = np.random.randint(700, 1600)  # Random rainfall between 700mm and 1600mm
            growth_period = np.random.randint(120, 310)  # Random growth period between 120 and 310 days
            min_damage = np.round(np.random.uniform(0.1, 0.5), 2)  # Random min damage
            max_damage = np.round(np.random.uniform(0.5, 1.0), 2)  # Random max damage
            min_yield = np.random.randint(2000, 5000)  # Random min yield between 2000 and 5000 kg/acre
            max_yield = min_yield + np.random.randint(1500, 3000)  # Max yield 1500-3000 kg/acre more than min yield
            avg_temp = np.random.randint(temp_ranges[crop][0], temp_ranges[crop][1])  # Random temp within crop's range
    
            rows.append([crop, rainfall, growth_period, min_damage, max_damage, min_yield, max_yield, avg_temp])
    
    # Convert to DataFrame
    df = pd.DataFrame(rows, columns=[
        'Crop', 'Rainfall (mm)', 'Total Growth Period (Days)',
        'Min Damage per cm of Rainfall (kg/cm)', 'Max Damage per cm of Rainfall (kg/cm)',
        'Min Yield per Acre (kg)', 'Max Yield per Acre (kg)', 'Avg Temperature (°C)'
    ])
    
    # Calculate average damage and yield
    df['Avg_Damage'] = (df['Min Damage per cm of Rainfall (kg/cm)'] + df['Max Damage per cm of Rainfall (kg/cm)']) / 2
    df['Avg_Yield'] = (df['Min Yield per Acre (kg)'] + df['Max Yield per Acre (kg)']) / 2
    
    # Save the dataset to a CSV file
    df.to_csv('crop_prediction_dummy_dataset.csv', index=False)
    
    # Display the first few rows of the dataset
    print(df.head(500))
    
    ```
    
    ```
    import pandas as pd
    import numpy as np
    from datetime import datetime, timedelta
    
    # Seed for reproducibility
    np.random.seed(42)
    
    # Define the crops
    crops = ['Rice', 'Maize', 'Banana', 'Mango', 'Apple']
    
    # Generate date range from 2013-01-01 to 2024-12-31
    start_date = datetime(2013, 1, 1)
    end_date = datetime(2024, 12, 31)
    date_range = pd.date_range(start=start_date, end=end_date, freq='D')
    
    # Generate data for each date and crop
    rows = []
    for date in date_range:
        for crop in crops:
            predicted_yield = np.random.randint(3000, 7000)  # Random predicted yield between 3000 and 7000 kg/acre
            market_demand = np.random.randint(2000, 10000)  # Random market demand between 2000 and 10000 tons
            market_supply = np.random.randint(1500, 8000)  # Random market supply between 1500 and 8000 tons
            transportation_cost = np.round(np.random.uniform(50, 200), 2)  # Random transportation cost between ₹50 and ₹200 per ton
            price_fluctuation = np.round(np.random.uniform(-0.1, 0.1), 2)  # Random price fluctuation between -10% and 10%
            historical_avg_price = np.round(np.random.uniform(200, 800), 2)  # Historical average price between ₹200 and ₹800 per ton
    
            # Market price calculation: (historical price) * (1 + fluctuation) + (transportation cost * supply/demand ratio)
            market_price = np.round(historical_avg_price * (1 + price_fluctuation) + (transportation_cost * market_supply / market_demand), 2)
    
            rows.append([date, crop, predicted_yield, market_demand, market_supply, transportation_cost, price_fluctuation, historical_avg_price, market_price])
    
    # Convert to DataFrame
    df_market = pd.DataFrame(rows, columns=[
        'Date', 'Crop', 'Predicted Yield (kg/acre)', 'Average Market Demand (tons)',
        'Market Supply (tons)', 'Average Transportation Cost (INR/ton)',
        'Price Fluctuation (%)', 'Historical Average Price (INR/ton)', 'Market Price (INR/ton)'
    ])
    
    # Save the dataset to a CSV file
    df_market.to_csv('agri_market_price_dummy_dataset_with_date.csv', index=False)
    
    # Display the first few rows of the dataset
    print(df_market.head(4017))
    
    ```
    

```python
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Seed for reproducibility
np.random.seed(42)

# Generate date range from 2013-01-01 to 2024-12-31
start_date = datetime(2013, 1, 1)
end_date = datetime(2024, 12, 31)
date_range = pd.date_range(start=start_date, end=end_date, freq='D')

# Generate random climate data for each date
rows = []
for date in date_range:
    # Generate random temperature data (in °C)
    avg_temp = np.round(np.random.uniform(15, 35), 1)  # Temperature between 15°C and 35°C

    # Generate random rainfall data (in mm)
    rainfall = np.round(np.random.uniform(0, 20), 2)  # Rainfall between 0mm and 20mm, allowing for dry days

    rows.append([date, avg_temp, rainfall])

# Convert to DataFrame
df_climate = pd.DataFrame(rows, columns=['Date', 'Avg Temperature (°C)', 'Rainfall (mm)'])

# Save the dataset to a CSV file
df_climate.to_csv('climate_data_dummy_dataset.csv', index=False)

# Display the first few rows of the dataset
print(df_climate.head(10))

```

```
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Seed for reproducibility
np.random.seed(42)

# Generate date range from 2013-01-01 to 2024-12-31
start_date = datetime(2013, 1, 1)
end_date = datetime(2024, 12, 31)
date_range = pd.date_range(start=start_date, end=end_date, freq='D')

# Generate data for each date and crop
rows = []
for date in date_range:
    for crop in ['Rice', 'Maize', 'Banana', 'Mango', 'Apple']:
        latitude = np.round(np.random.uniform(20.0, 30.0), 2)  # Example latitude range
        longitude = np.round(np.random.uniform(70.0, 90.0), 2)  # Example longitude range
        elevation = np.random.randint(10, 100)  # Example elevation in meters

        avg_temp = np.round(np.random.uniform(15, 35), 1)  # Temperature in °C
        rainfall = np.round(np.random.uniform(0, 20), 2)  # Rainfall in mm
        humidity = np.random.randint(40, 90)  # Humidity in %
        wind_speed = np.round(np.random.uniform(0, 20), 1)  # Wind speed in km/h
        solar_radiation = np.round(np.random.uniform(10, 30), 1)  # Solar radiation in MJ/m²

        soil_ph = np.round(np.random.uniform(5.5, 7.5), 1)  # Soil pH
        soil_organic_matter = np.round(np.random.uniform(1.0, 5.0), 1)  # Soil organic matter in %
        nitrogen = np.random.randint(20, 100)  # Nitrogen in mg/kg
        phosphorus = np.random.randint(10, 50)  # Phosphorus in mg/kg
        potassium = np.random.randint(20, 100)  # Potassium in mg/kg

        irrigation_type = np.random.choice(['Drip', 'Flood', 'None'])
        fertilizer = np.random.randint(100, 300)  # Fertilizer in kg/acre
        pesticide = np.random.randint(1, 10)  # Pesticide in kg/acre

        gov_subsidy = np.random.randint(1000, 5000)  # Government subsidy in INR
        export_import_volume = np.random.randint(5000, 20000)  # Export/import volume in tons

        historical_yield = np.random.randint(2000, 5000)  # Historical yield in kg/acre
        historical_price = np.round(np.random.uniform(200, 800), 2)  # Historical price in INR/ton

        # Simulated market price and predicted yield
        market_price = np.round(historical_price * (1 + np.random.uniform(-0.1, 0.1)) + (np.random.uniform(50, 200) * export_import_volume / np.random.randint(2000, 10000)), 2)
        predicted_yield = np.random.randint(3000, 7000)  # Predicted yield in kg/acre

        rows.append([date, crop, latitude, longitude, elevation, avg_temp, rainfall, humidity, wind_speed, solar_radiation,
                     soil_ph, soil_organic_matter, nitrogen, phosphorus, potassium, irrigation_type, fertilizer, pesticide,
                     gov_subsidy, export_import_volume, historical_yield, historical_price, market_price, predicted_yield])

# Convert to DataFrame
df = pd.DataFrame(rows, columns=['Date', 'Crop', 'Latitude', 'Longitude', 'Elevation', 'Avg Temp (°C)', 'Rainfall (mm)', 'Humidity (%)',
                                 'Wind Speed (km/h)', 'Solar Radiation (MJ/m²)', 'Soil pH', 'Soil Organic Matter (%)', 'N (mg/kg)',
                                 'P (mg/kg)', 'K (mg/kg)', 'Irrigation Type', 'Fertilizer (kg/acre)', 'Pesticide (kg/acre)',
                                 'Gov. Subsidy (INR)', 'Export/Import Volume (tons)', 'Historical Yield (kg/acre)',
                                 'Historical Price (INR/ton)', 'Market Price (INR/ton)', 'Predicted Yield (kg/acre)'])

# Save the dataset to a CSV file
df.to_csv('enhanced_agriculture_dataset.csv', index=False)

# Display the first few rows of the dataset
print(df.head(10))

```

```
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
import joblib
import humanize
import math
```

```
# Load datasets
crop_data = pd.read_csv('/content/crop_prediction_dummy_dataset.csv')
market_data = pd.read_csv('/content/agri_market_price_dummy_dataset_with_date.csv')
climate_data = pd.read_csv('/content/climate_data_dummy_dataset.csv')
enhanced_agri_data = pd.read_csv('/content/enhanced_agriculture_dataset.csv')

# Merging datasets based on Date and Crop, which are common keys
merged_data = pd.merge(enhanced_agri_data, market_data, on=['Date', 'Crop'])
merged_data = pd.merge(merged_data, crop_data, on='Crop')

# Display the first few rows to confirm the merge
print(merged_data.head())

```

```
# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target_yield, test_size=0.2, random_state=42)

# Model with Huber loss
gbr_yield = GradientBoostingRegressor(loss='huber', n_estimators=500, learning_rate=0.01, max_depth=5, random_state=42)

# Train the model
gbr_yield.fit(X_train, y_train)

# Predicting and evaluating the model on test data
y_pred = gbr_yield.predict(X_test)
rmse = math.sqrt(np.mean((y_test - y_pred) ** 2))
mae = mean_absolute_error(y_test, y_pred)
print(f"Root Mean Squared Error for Yield Prediction: {rmse}")
print(f"Mean Absolute Error for Yield Prediction: {mae}")

# Using the same features for market price prediction
X_train_price, X_test_price, y_train_price, y_test_price = train_test_split(features, target_price, test_size=0.2, random_state=42)

# Model for market price prediction
gbr_price = GradientBoostingRegressor(loss='huber', n_estimators=500, learning_rate=0.01, max_depth=5, random_state=42)

# Train the model
gbr_price.fit(X_train_price, y_train_price)

# Predicting and evaluating the model on test data
y_pred_price = gbr_price.predict(X_test_price)
rmse_price = math.sqrt(np.mean((y_test_price - y_pred_price) ** 2))
mae_price = mean_absolute_error(y_test_price, y_pred_price)
print(f"Root Mean Squared Error for Market Price Prediction: {rmse_price}")
print(f"Mean Absolute Error for Market Price Prediction: {mae_price}")

# Calculate the income for each crop
income = y_pred * y_pred_price

# Find the crop with the maximum income
crops = merged_data['Crop'].iloc[X_test.index].reset_index(drop=True)
optimal_crop_index = np.argmax(income)
optimal_crop = crops.iloc[optimal_crop_index]
optimal_market_price = y_pred_price[optimal_crop_index]

# Format the income in Indian numbering system style
formatted_income = humanize.intcomma(int(income[optimal_crop_index]))

# Display the result
print(f"The optimal crop to sow is: {optimal_crop} with an estimated market price of {optimal_market_price:.2f} INR/ton and an estimated income of {formatted_income} INR")

# Save the models
joblib.dump(gbr_yield, 'gbr_yield_model.pkl')
joblib.dump(gbr_price, 'gbr_price_model.pkl')

# Confirmation message
print("Models saved successfully.")
```
